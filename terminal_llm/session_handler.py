# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_session_handler.ipynb.

# %% auto 0
__all__ = ['SessionHandler']

# %% ../nbs/02_session_handler.ipynb 3
from fastcore.all import *
from .chat import Chat

# %% ../nbs/02_session_handler.ipynb 4
class SessionHandler():
  def __init__(self, interface):
    store_attr()
    self.is_running = True
  
  def start_app(self):
    # TODO: Check wifi is connected.
    if Path('.storage').exists():
      self.read_api_key()
      self.read_model()
    else:
      Path('.storage').mkdir()
      self.set_api_key()
      self.set_model()
  
  def process_menu(self, choice):
    if   choice == '0': self.is_running = False
    elif choice == '1': self.interface.settings()
    elif choice == '2': self.start_chat()
    elif choice == '3': pass # previous chats
    else							: print("Invalid choice.")
  
  def process_settings(self, choice):
    if   choice == '0': pass
    elif choice == '1': self.set_api_key()
    elif choice == '2': self.set_model()
    else							: print('Invalid choice.')
  
  def start_chat(self):
    print('Starting chat...')
    # TODO: Print out assistant greeting.
    self.chat = Chat(self.api_key, self.model)
    while True:
      user_input = input('You: ')
      if user_input.lower().strip() == '\\exit': break
      else: 
        response = self.chat(user_input)
        print(f'Assistant: {response}')
    

  def read_model(self):
    try: self.model = self.read_file('.storage/model.txt')
    except FileNotFoundError: 
      print('Model not found.')
      self.set_model()

  def read_api_key(self):
    try: self.api_key = self.read_file('.storage/api_key.txt')
    except FileNotFoundError: 
      print("API key not found.")
      self.set_api_key()

  def set_model(self):
      self.model = input('Enter model: ')
      while self.model not in ['open-mistral-7b', 'open-mixtral-8x7b', 'mistral-small-latest', 'mistral-medium-latest', 'mistral-large-latest']: self.model = input('Invalid model. Enter model: ')
      self.write_file('.storage/model.txt', self.model)
      print('Model saved.')

  def set_api_key(self):
      # TODO: Add a check to see whether entered API key is valid.
      self.api_key = input('Enter API Key: ')
      self.write_file('.storage/api_key.txt', self.api_key)
      print('API key saved.')

  def read_file(self, f_path):
    with open(f_path, 'r') as f: return f.read()
  
  def write_file(self, f_path, content):
    with open(f_path, 'w') as f: f.write(content)
  
  
